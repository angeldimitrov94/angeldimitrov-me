<h5>Who am I?</h5>
<p>Generalist software engineer in the San Francisco Bay Area, California with a passion for learning 
    and figuring out innovative and appropriate uses for new (or at least new to me) technologies.</p>

<h5>What motivates me?</h5>
<p>Having been someone who has supported both (painfully) legacy and greenfield software deployed 'in the wild', 
    I'm intimately aware of the impact that technical decisions have on the always elusive balance between 
    time-to-market, MVP (minimum viable product), ease of support and technical debt. 
    This mindset of balance drives all of my design decisions.</p>

<h5>What am I currently learning?</h5>
<p>How to <b>responsibly</b> design microservice architectures, with an emphasis on embracing elegant 
    (read simple and performant) architectures and thinking twice before buying into a new 'fad' technology. 
    Also connecting my prior knowledge of backend/embedded software to the entire picture - how the full stack truly works.<br><br>
Currently working on :</p>
<dl>
    <dt><i>Containerization/Docker</i></dt>
    <dd>Design considerations for containerized architectures such as inter-service networking</dd>
    <dt><i>Kubernetes</i></dt>
    <dd>Most importantly, when it does and doesn't make sense to use it</dd>
    <dt><i>NoSQL vs relational databases</i></dt>
    <dd>When are the replication/horizontal scalability features offered by NoSQL actually worth the lack of schemas?</dd>
    <dt><i>HTMX</i></dt>
    <dd>This technology is particularly interesting to me as it goes against the current 'norm' of how to build sites.</dd>
    <dt><i>EJS templating engine (what this site is built with)</i></dt>
</dl>

<h5>What am I NOT?</h5>
<p>NOT a UI/UX specialist - although I strongly admire beautiful and artful designs, that is not my forte. 
    I'd much rather focus on making services performant and scalable.</p>